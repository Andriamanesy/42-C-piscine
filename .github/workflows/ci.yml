name: CI – Piscine 42

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Installer Norminette
        run: python3 -m pip install -U pip setuptools norminette

      - name: Compiler & exécuter tests
        run: |
          mkdir -p build
          find tests -type f -name 'main.c' | while read -r t; do
            exe="build/$(basename "$(dirname "$t")")"
            cc -Wall -Wextra -Werror "$t" -o "$exe"
            "$exe"
          done
      - name: ▶️ Exécuter les binaires
        run: |
          shopt -s nullglob
          for f in build/*; do
            echo "✔ Running $f"
            "$f" || exit 1
          done

      - name: ✅ Lint style (Norminette)
        run: |
            set +e
            files=$(find . -type f -name '*.c' ! -path './tests/*')
            output=$(norminette -R CheckForbiddenSourceHeader $files 2>&1)
            echo "$output"
            errors=$(echo "$output" | grep -v 'Error: INVALID_HEADER' | grep 'Error:')
            if [ -n "$errors" ]; then
            echo "Erreur(s) autre(s) que INVALID_HEADER détectée(s) :"
            echo "$errors"
            exit 1
            fi
      - name: ▶️ Compiler & exécuter tests unitaires
        run: |
            shopt -s globstar
            mkdir -p build
            for testfile in tests/C0*/ex*/test_*.c; do
                exdir=$(basename "$(dirname "$testfile")")
                cdir=$(basename "$(dirname "$(dirname "$testfile")")")
                expected_srcfile="$cdir/$exdir/$(basename "$testfile" | sed 's/^test_//')"

                if [ ! -f "$expected_srcfile" ]; then
                    echo "❌ Fichier source attendu manquant : $expected_srcfile"
                    echo "Test $testfile ignoré."
                    continue
                fi

                exe="build/$(basename "$testfile" .c)"
                echo "Compilation de $testfile avec $expected_srcfile"
                cc -Wall -Wextra -Werror "$testfile" "$expected_srcfile" -o "$exe"
                echo "Exécution de $exe"
                "$exe"
            done




